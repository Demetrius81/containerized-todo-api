// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Demetrius81/containerized-todo-api/internal/middleware"
	"github.com/Demetrius81/containerized-todo-api/internal/repository/postgres"
	"github.com/Demetrius81/containerized-todo-api/internal/server"
	"github.com/Demetrius81/containerized-todo-api/internal/services/apiservice"
	"github.com/Demetrius81/containerized-todo-api/internal/services/logger"
	"github.com/google/wire"
	"io"
	"os"
)

// Injectors from wire.go:

func InitializeServer(dsn string) (*server.Server, error) {
	db, err := postgres.NewDB(dsn)
	if err != nil {
		return nil, err
	}
	storage, err := postgres.NewStorage(db)
	if err != nil {
		return nil, err
	}
	writer := newWriter()
	loggerLogger := logger.NewLogger(writer)
	loggerMiddleware := middleware.NewLoggerMiddleware(loggerLogger)
	todoHandlers := apiservice.NewTodoHandlers(storage, loggerMiddleware)
	serverServer := server.NewServer(todoHandlers)
	return serverServer, nil
}

// wire.go:

func newWriter() io.Writer {
	return os.Stdout
}

// Провайдеры для wire
var (
	storageSet = wire.NewSet(postgres.NewStorage, wire.Bind(new(apiservice.IStorage), new(*postgres.Storage)))

	apiSet = wire.NewSet(apiservice.NewTodoHandlers, wire.Bind(new(server.ITodoHandlers), new(*apiservice.TodoHandlers)))

	loggerMiddlewareSet = wire.NewSet(middleware.NewLoggerMiddleware, wire.Bind(new(apiservice.ILoggerMiddleware), new(*middleware.LoggerMiddleware)))

	loggerSet = wire.NewSet(logger.NewLogger, wire.Bind(new(middleware.ILogger), new(*logger.Logger)))
)
